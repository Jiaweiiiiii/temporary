cmake_minimum_required(VERSION 3.0)
set(CMAKE_SYSTEM_NAME Linux)

option(MIPS_GLIBC_COMPILER "set MIPS_GLIBC_COMPILER default" ON)
if(MIPS_GLIBC_COMPILER)
  set(CMAKE_CROSS_COMPILER "mips-linux-gnu-")
else()
  set(CMAKE_CROSS_COMPILER "mips-linux-uclibc-")
endif()
set(CMAKE_C_COMPILER "${CMAKE_CROSS_COMPILER}gcc")
set(CMAKE_CXX_COMPILER "${CMAKE_CROSS_COMPILER}g++")

exec_program(${CMAKE_C_COMPILER} ARGS "-v 2>&1 | sed -n '/gcc version/p'" OUTPUT_VARIABLE CMD_OUT RETURN_VALUE CMD_RET)
if($(CMD_RET))
  message(FATAL_ERROR "${CMAKE_C_COMPILER} not found.")
else()
  string(REPLACE  " " ";" VERSION_LIST ${CMD_OUT})
  list(LENGTH VERSION_LIST VERSION_LEN)
  if(${VERSION_LEN} LESS 3)
    message(FATAL_ERROR "${CMAKE_C_COMPILER} GCC VERSION not found.")
  endif()
  list(GET VERSION_LIST 2 GCC_VERSION)
  message(STATUS "GCC_VERSION:" ${GCC_VERSION})

  set(RELEASE_VERSION "0.0.0")
  set(GLIBC_VERSION "2.26")
  if(${VERSION_LEN} GREATER_EQUAL 5)
    list(GET VERSION_LIST 4 RELEASE_LIST)
    message(STATUS "RELEASE_LIST:" ${RELEASE_LIST})
    string(REGEX MATCH "([0-9]+)\\.([0-9]+)\\.([0-9]+)" RELEASE_VERSION "${RELEASE_LIST}")
    string(LENGTH "${RELEASE_VERSION}" VERSION_LEN)
    if(${VERSION_LEN} EQUAL 0)
      message(FATAL_ERROR "${CMAKE_C_COMPILER} GCC RELEASE VERSION not found.")
    endif()
    message(STATUS "RELEASE_VERSION:" ${RELEASE_VERSION})

    string(REGEX MATCH "libc([0-9]+(\\.[0-9]+)+)" GLIBC_VERSION_STRING "${RELEASE_LIST}")
    string(REGEX MATCH "([0-9]+(\\.[0-9]+)+)" GLIBC_VERSION "${GLIBC_VERSION_STRING}")
    string(LENGTH "${GLIBC_VERSION}" VERSION_LEN)
    if(${VERSION_LEN} EQUAL 0)
      set(GLIBC_VERSION "2.26")
    endif()
    message(STATUS "GLIBC_VERSION:" ${GLIBC_VERSION})
  endif()
endif()

project(Drivers)
option(VENUS_MEM_MSG_ENABLE "set VENUS_MEM_MSG_ENABLE default" OFF)

set(OUT_LIB_NAME "drivers")
if(VENUS_MEM_MSG_ENABLE)
  add_definitions(-DVENUS_MEM_MSG)
  set(OUT_LIB_NAME "drivers.m")
endif()

set(CMAKE_CXX_FLAGS "-std=c++11 -O2 -Wall -fPIC")
set(CMAKE_C_FLAGS "-O2 -Wall -fPIC")

set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/${GCC_VERSION}/${GLIBC_VERSION})

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
add_subdirectory(src)
